plugins {
    id "org.jetbrains.kotlin.jvm" version "1.8.10"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.8.10"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

group = "me.shedaniel"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
    maven { url "https://maven.fabricmc.net" }
    maven {
        url "https://jitpack.io"
        content {
            includeGroupByRegex "com(.\\w+)+"
        }
    }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://maven.quiltmc.org/repository/release" }
}

configurations {
    shadow {
        extendsFrom(implementation)
    }
}

dependencies {
    implementation("me.shedaniel:linkie-core:1.0.111")
    implementation("io.ktor:ktor-server-cors:2.2.3")
    implementation("io.ktor:ktor-server-content-negotiation:2.2.3")
    implementation("io.ktor:ktor-server-status-pages:2.2.3")
    implementation("io.ktor:ktor-client-content-negotiation:2.2.3")
    implementation("io.ktor:ktor-serialization-kotlinx-json:2.2.3")
    implementation("io.github.pdvrieze.xmlutil:serialization-jvm:0.84.3")
    implementation("io.ktor:ktor-server-core-jvm:2.2.3")
    implementation("io.ktor:ktor-server-netty-jvm:2.2.3")
    implementation("io.ktor:ktor-client-java-jvm:2.2.3")
    implementation("io.ktor:ktor-client-core-jvm:2.2.3")
    implementation("com.github.Baw-Appie:ktor-rate-limit:1cf36fe")
}

jar {
    classifier "raw"
}

shadowJar {
    configurations = [project.configurations.shadow]
    classifier null
    version null
    mergeServiceFiles()
    manifest {
        attributes(
                "Main-Class": "me.shedaniel.linkie.web.LinkieWebServerKt"
        )
    }
}

build.finalizedBy shadowJar

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def launcher = javaToolchains.launcherFor {
    languageVersion.set(JavaLanguageVersion.of(17))
    vendor.set(JvmVendorSpec.matching("adoptium"))
}

tasks.register("customJre", Exec) {
    doFirst {
        file("build/libs/jdk-17-minjre").deleteDir()
    }
    def tmp = File.createTempDir("jdk-17-minjre")
    tmp.deleteOnExit()
    workingDir = tmp
    def exe = new File(launcher.get().executablePath.asFile.parentFile, "jlink.exe")
    def obj = new File(launcher.get().executablePath.asFile.parentFile, "jlink")
    def cmd = [(exe.exists() ? exe : obj).absolutePath, "--add-modules", "java.base,java.xml,jdk.unsupported,java.net.http,jdk.crypto.ec,jdk.zipfs",
               "--output", "jdk-17-minjre", "--strip-debug", "--no-man-pages", "--no-header-files", "--compress=2"]
    commandLine(cmd)
    println(String.join(" ", cmd))
    doLast {
        copy {
            from(tmp)
            into("build/libs")
        }
        tmp.deleteDir()
    }
}
